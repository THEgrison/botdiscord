import os
import discord
from discord.ext import commands
from flask import Flask

# --- Serveur Flask pour UptimeRobot ---
app = Flask('')

# Route principale qui renvoie un message pour v√©rifier que le bot est vivant
@app.route('/')
def home():
    return "Je suis vivant !"  # Message envoy√© pour la v√©rification d'UptimeRobot

# --- Discord Bot ---

# Charger le token depuis les variables d'environnement
TOKEN = os.environ['TOKEN']

# D√©finir les intents n√©cessaires
intents = discord.Intents.default()
intents.message_content = True

# Initialiser le bot
bot = commands.Bot(command_prefix="/", intents=intents, help_command=None)

# Quand le bot est pr√™t
@bot.event
async def on_ready():
    print(f"‚úÖ Connect√© en tant que {bot.user}")
    await bot.tree.sync()
    print("üìú Commandes charg√©es :",
          [command.name for command in bot.tree.get_commands()])

# Charger automatiquement les fichiers de cogs
async def load_extensions():
    for filename in os.listdir("./commands"):
        if filename.endswith(".py"):
            try:
                cog_name = f"commands.{filename[:-3]}"
                await bot.load_extension(cog_name)
                print(f"‚úÖ {filename} charg√© avec succ√®s")
            except Exception as e:
                print(f"‚ùå Erreur lors du chargement de {filename}: {e}")

# Fonction principale pour d√©marrer le bot
async def main():
    async with bot:
        await load_extensions()
        await bot.start(TOKEN)

# Lancer le bot
import asyncio
asyncio.run(main())

# Lancer Flask dans un thread s√©par√©
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8080))  # Railway d√©finit cette variable automatiquement
    app.run(host='0.0.0.0', port=port)  # Flask lanc√© avec `app.run()` pour le d√©veloppement
